#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <stdlib.h>

using namespace std;

class Tile {
  
  public:
  
    string type;
    int value;
    vector<double> settlements;
    vector<int> roads;
    bool robber;
    
    Tile(string material, int val) {
        
        type = material;
        value = val;
        robber = false;
        
        for (int i = 0; i < 6; i++) {
            
            roads.push_back(0);
            
        }
        
    }
    
};

class Board {
    
    public:
    
        vector<Tile> board;
        
        Board() {
            
            vector<string> tileTypes;
            for (int i = 0; i < 4; i++) {
                if (i != 0) {
                    tileTypes.push_back("Brick");
                    tileTypes.push_back("Ore");
                }
                tileTypes.push_back("Sheep");
                tileTypes.push_back("Wheat");
                tileTypes.push_back("Wood");
                
            }
            
            vector<int> values;
            for (int i = 2; i < 13; i++) { 
                
                if (i != 7) {
                    if (i != 2 && i != 12)
                        values.push_back(i);
                    values.push_back(i);
                }
            }
            
            srand(time(0));
            
            random_shuffle(tileTypes.begin(), tileTypes.end());
            random_shuffle(values.begin(), values.end());
            
            cout << tileTypes.size() << " ";
            cout << values.size() << endl;
            
            //for (int i = 0; i < values.size(); i++) {
            //    cout << values[i] << " ";
            //}
            
            bool randUsed = false;
            int randSpot = rand() % 18;
            //cout << randSpot << endl;
            for (int i = 0; i < 19; i++) {
                
                if (i == randSpot) {
                    Tile newTile("Desert", 0);
                    board.push_back(newTile);
                    randUsed = true;
                }
                else if (!randUsed) {
                    Tile newTile(tileTypes[i], values[i]);
                    board.push_back(newTile);
                
                }
                else {
                    Tile newTile(tileTypes[i-1], values[i-1]);
                    board.push_back(newTile);
                }
               
            }
            
            cout << board.size() << endl;
            
        }
        
        void displayInfo() {
            
            for (int i = 0; i < board.size(); i++) {
                
                cout << "Tile " << i << ": " << board[i].type << " " << board[i].value << endl;
                
                int count = 0;
                
                for (int q = 0; q < 6; q++) {
                    
                    if (board[i].settlements[q] != 0)
                        count++;
                    
                }
                
                //cout << "Tile " << i << " has " << count << " spots available" << endl;
                
                for (int q = 0; q < 6; q++) {
                    
                    //cout << "Tile " << i << "Spot " << q << " strength is " << board[i].settlements[q] << endl;
                    
                }
                
            }
            
        }
        
        void buildSettlement(int x) {
            
            vector<int> available;
            
            for (int q = 0; q < 6; q++) {
                    
                if (board[x].settlements[q] != 0)
                    available.push_back(q);
                    
            }
            
            cout << "Where would you like to build your settlement?" << endl;
            cout << "Avaialble spots are: ";
            
            for (int i = 0; i < available.size(); i++) {
                
                cout << available[i] << " ";
                
            }
            
            cout << endl;
            
            int location;
            cin >> location;
            
            bool actuallyAvailable = false;
            
            for (int i = 0; i < available.size(); i++) {
                if (location == available[i])
                    actuallyAvailable = true;
            }
            
            while (actuallyAvailable == false) {
                
                cout << "Invalid option, please choose again" << endl;
                cin >> location;
                for (int i = 0; i < available.size(); i++) {
                    if (location == available[i])
                        actuallyAvailable = true;
                }
            }
            
            board[x].settlements[location] = 0;
        }
        
        double valueStrength(int val) {
    
            double str = 0;
            
            if (val == 6 || val == 8) {
                
                str = 5;
                
            }
            
            else if (val == 5 || val == 9) {
                
                str = 4;
                
            }
            
            else if (val == 4 || val == 10) {
                
                str = 3;
                
            }
            
            else if (val == 3 || val == 11) {
                
                str = 2;
                
            }
            
            else if (val == 2 || val == 12) {
                
                str = 1;
                
            }
            
            return str;
            
        }
    
        double materialStrength(string ttype) {
            
            double str = 1;
            
            if (ttype.compare("Ore") == 0 || ttype.compare("Brick") == 0)
                str = 1.25;
            else if (ttype.compare("Sheep") == 0)
                str = 0.75;
            else if (ttype.compare("Desert") == 0)
                str = 0;
                
            return str;
        }
        
        double combStr(int tileNum) {
            
            return valueStrength(board[tileNum].value) * materialStrength(board[tileNum].type);
                
        }
        
        double calcStrength(int tile, int spot) {
            
            double str = 0;
            
            if (tile == 0) {
                
                str = combStr(0);
                if (spot == 1)
                    str += combStr(1);
                else if (spot == 2)
                    str += combStr(1) + combStr(4);
                else if (spot == 3)
                    str += combStr(3) + combStr(4);
                else if (spot == 4)
                    str += combStr(3);
            }
            
            if (tile == 1) {
                
                str = combStr(1);
                if (spot == 1)
                    str += combStr(2);
                else if (spot == 2)
                    str += combStr(2) + combStr(5);
                else if (spot == 3)
                    str += combStr(4) + combStr(5);
                else if (spot == 4)
                    str += combStr(2) + combStr(4);
                else if (spot == 5)
                    str += combStr(0);
            }
            
            if (tile == 2) {
                
                str = combStr(2);
                if (spot == 2)
                    str += combStr(6);
                else if (spot == 3)
                    str += combStr(5) + combStr(6);
                else if (spot == 4)
                    str += combStr(1) + combStr(5);
                else if (spot == 5)
                    str += combStr(1);
            }
            
            if (tile == 3) {
                
                str = combStr(3);
                if (spot == 0)
                    str += combStr(0);
                else if (spot == 1)
                    str += combStr(0) + combStr(4);
                else if (spot == 2)
                    str += combStr(4) + combStr(8);
                else if (spot == 3)
                    str += combStr(7) + combStr(8);
                else if (spot == 4)
                    str += combStr(7);
            }
            
            if (tile == 4) {
                
                str = combStr(4);
                if (spot == 0)
                    str += combStr(0) + combStr(1);
                else if (spot == 1)
                    str += combStr(1) + combStr(5);
                else if (spot == 2)
                    str += combStr(5) + combStr(9);
                else if (spot == 3)
                    str += combStr(8) + combStr(9);
                else if (spot == 4)
                    str += combStr(3) + combStr(8);
                else if (spot == 5)
                    str += combStr(0) + combStr(3);
            }
            
            if (tile == 5) {
                
                str = combStr(5);
                if (spot == 0)
                    str += combStr(1) + combStr(2);
                else if (spot == 1)
                    str += combStr(2) + combStr(6);
                else if (spot == 2)
                    str += combStr(6) + combStr(10);
                else if (spot == 3)
                    str += combStr(9) + combStr(10);
                else if (spot == 4)
                    str += combStr(4) + combStr(9);
                else if (spot == 5)
                    str += combStr(1) + combStr(4);
            }
            
            if (tile == 6) {
                
                str = combStr(6);
                if (spot == 0)
                    str += combStr(2);
                else if (spot == 2)
                    str += combStr(11);
                else if (spot == 3)
                    str += combStr(10) + combStr(11);
                else if (spot == 4)
                    str += combStr(5) + combStr(10);
                else if (spot == 5)
                    str += combStr(2) + combStr(5);
            }
            
            if (tile == 7) {
                
                str = combStr(7);
                if (spot == 0)
                    str += combStr(3);
                else if (spot == 1)
                    str += combStr(3) + combStr(8);
                else if (spot == 2)
                    str += combStr(8) + combStr(12);
                else if (spot == 3)
                    str += combStr(12);
            }
            
            if (tile == 8) {
                
                str = combStr(8);
                if (spot == 0)
                    str += combStr(3) + combStr(4);
                else if (spot == 1)
                    str += combStr(4) + combStr(9);
                else if (spot == 2)
                    str += combStr(9) + combStr(13);
                else if (spot == 3)
                    str += combStr(12) + combStr(13);
                else if (spot == 4)
                    str += combStr(7) + combStr(12);
                else if (spot == 5)
                    str += combStr(3) + combStr(7);
            }
            
            if (tile == 9) {
                
                str = combStr(9);
                if (spot == 0)
                    str += combStr(4) + combStr(5);
                else if (spot == 1)
                    str += combStr(5) + combStr(10);
                else if (spot == 2)
                    str += combStr(10) + combStr(14);
                else if (spot == 3)
                    str += combStr(13) + combStr(14);
                else if (spot == 4)
                    str += combStr(8) + combStr(13);
                else if (spot == 5)
                    str += combStr(4) + combStr(8);
            }
            
            if (tile == 10) {
                
                str = combStr(10);
                if (spot == 0)
                    str += combStr(5) + combStr(6);
                else if (spot == 1)
                    str += combStr(6) + combStr(11);
                else if (spot == 2)
                    str += combStr(11) + combStr(15);
                else if (spot == 3)
                    str += combStr(14) + combStr(15);
                else if (spot == 4)
                    str += combStr(9) + combStr(14);
                else if (spot == 5)
                    str += combStr(5) + combStr(9);
            }
            
            if (tile == 11) {
                
                str = combStr(11);
                if (spot == 0)
                    str += combStr(6);
                else if (spot == 3)
                    str += combStr(15);
                else if (spot == 4)
                    str += combStr(10) + combStr(15);
                else if (spot == 5)
                    str += combStr(6) + combStr(10);
            }
            
            if (tile == 12) {
                
                str = combStr(12);
                if (spot == 0)
                    str += combStr(7) + combStr(8);
                else if (spot == 1)
                    str += combStr(8) + combStr(13);
                else if (spot == 2)
                    str += combStr(13) + combStr(16);
                else if (spot == 3)
                    str += combStr(16);
                else if (spot == 5)
                    str += combStr(7);
            }
            
            if (tile == 13) {
                
                str = combStr(13);
                if (spot == 0)
                    str += combStr(8) + combStr(9);
                else if (spot == 1)
                    str += combStr(9) + combStr(14);
                else if (spot == 2)
                    str += combStr(14) + combStr(17);
                else if (spot == 3)
                    str += combStr(16) + combStr(17);
                else if (spot == 4)
                    str += combStr(12) + combStr(16);
                else if (spot == 5)
                    str += combStr(8) + combStr(12);
            }
            
            if (tile == 14) {
                
                str = combStr(14);
                if (spot == 0)
                    str += combStr(9) + combStr(10);
                else if (spot == 1)
                    str += combStr(10) + combStr(15);
                else if (spot == 2)
                    str += combStr(15) + combStr(18);
                else if (spot == 3)
                    str += combStr(17) + combStr(18);
                else if (spot == 4)
                    str += combStr(13) + combStr(17);
                else if (spot == 5)
                    str += combStr(9) + combStr(13);
            }
            
            if (tile == 15) {
                
                str = combStr(15);
                if (spot == 0)
                    str += combStr(10) + combStr(11);
                else if (spot == 1)
                    str += combStr(11);
                else if (spot == 3)
                    str += combStr(18);
                else if (spot == 4)
                    str += combStr(14) + combStr(18);
                else if (spot == 5)
                    str += combStr(10) + combStr(14);
            }
            
            if (tile == 16) {
                
                str = combStr(16);
                if (spot == 0)
                    str += combStr(12) + combStr(13);
                else if (spot == 1)
                    str += combStr(13) + combStr(17);
                else if (spot == 2)
                    str += combStr(17);
                else if (spot == 5)
                    str += combStr(12);
            }
            
            if (tile == 17) {
                
                str = combStr(17);
                if (spot == 0)
                    str += combStr(13) + combStr(14);
                else if (spot == 1)
                    str += combStr(14) + combStr(18);
                else if (spot == 2)
                    str += combStr(18);
                else if (spot == 4)
                    str += combStr(16);
                else if (spot == 5)
                    str += combStr(13) + combStr(16);
            }
            
            if (tile == 18) {
                
                str = combStr(18);
                if (spot == 0)
                    str += combStr(14) + combStr(15);
                else if (spot == 1)
                    str += combStr(15);
                else if (spot == 4)
                    str += combStr(17);
                else if (spot == 5)
                    str += combStr(14) + combStr(17);
            }
            
            return str;
            
        }
        
        void initializeStrength() {
            for (int i = 0; i < 19; i++) {
                for (int q = 0; q < 6; q++) {
                    board[i].settlements.push_back(calcStrength(i, q));
                }
            }
        }
        
        void findStrongest() {
            
            double strongest = 0;
            int tilePos = 0;
            int setPos = 0;
            for (int i = 0; i < 19; i++) {
                for (int q = 0; q < 6; q++) {
                    if (board[i].settlements[q] > strongest) {
                        strongest = board[i].settlements[q];
                        tilePos = i;
                        setPos = q;
                    }
                    //cout << board[i].settlements[q] << " Tile " << i << "Spot " << q << endl;
                }
            }
            
            cout << "Strongest: Tile " << tilePos << " Spot " << setPos << endl;
            cout << "Strength: " << strongest << endl;
        }
    
};

int main()
{
    
    Board test;
    test.initializeStrength();
    
    int testLoc = 0;
    test.displayInfo();
    test.findStrongest();
    while (testLoc != -1) {
        cout << "Choose a tile to build a settlement (Choose -1 to not build): ";
        cin >> testLoc;
        test.buildSettlement(testLoc);
        test.findStrongest();
    }
    return 0;
}
